clc
clear all()
rm(list=ls())
x <- c(1,2,3,4,5,6)
y <- c(5,10,15,20,25,30)
plot(x,y)
rm(list=ls())
library(ggplot2)
install.packages("ggplot2")
p1 = pnorm(30,50,5)
p3 = 1 - pnorm(60,50,5)
p2 = qnorm(0.25,50,5)
p3 = qnorm(0.79,50,5)
p4 = 1 - pnorm(60,50,5)
p5 = dnorm(50,50,5) - dnorm(40,50,5)
p6 = rnorm(1000,50,5)
p7 = dnorm(30,50,5)
p8 = dnorm(50,50,5)
p9 = dnorm(log(60,50,5))
p9 = dnorm(60,50,5)
p10 = log(p9)
ls = function(x,y){
n = length(x)
sum_xy = sum(x*y)
mean_xy = n*mean(x)*mean(y)
sum_x_sq = sum(x)^2
mean_x = n*(mean(x))^2
mhat = (sum_xy - mean_xy)/(sum_x_sq - mean_x)
chat = mean(y) - mhat*mean(x)
}
data("cars")
df <- data("cars")
View(ls)
View(df)
data("cars")
View(data)
View(cars)
plot(cars$speed, cars$dist)
ls = function(x,y){
n = length(x)
sum_xy = sum(x*y)
mean_xy = n*mean(x)*mean(y)
sum_x_sq = sum(x)^2
mean_x = n*(mean(x))^2
mhat = (sum_xy - mean_xy)/(sum_x_sq - mean_x)
chat = mean(y) - mhat*mean(x)
return(c(mhat, chat))
}
x = cars$speed
y = cars$dist
ls(x,y)
slope <- 0.009271963
intercept <- 42.837211768
plot(cars$speed, cars$dist)
abline(a = intercept, b = slope, col='blue')
#abline(a = intercept, b = slope, col='blue')
abline(lm(x ~ y, data = cars), col = 'blue')
plot(cars$speed, cars$dist)
x = cars$speed
y = cars$dist
#abline(a = intercept, b = slope, col='blue')
abline(lm(x ~ y), col = 'blue')
abline(a = intercept, b = slope, col='blue')
rm(list=ls())
rm(list = ls())
rm(list=ls())
rm(list <- ls())
rm(list = ls())
rm(list=ls())
rm(list=ls())
n <- 10000
x <- runif(1, min = -1, max = 1)
y <- runif(1, min = -1, max = 1)
num_darts <- 10000
num_darts_in_circle <- 0
for(i in range 1:num_darts){
num_darts <- 10000
num_darts_in_circle <- 0
for(i in 1:num_darts){
x <- runif(1, min = -1, max = 1)
y <- runif(1, min = -1, max = 1)
if(x^2 + y^2 <= 1){
num_darts_in_circle = num_darts_in_circle + 1
}
print(4 * (num_darts_in_circle/num_darts))
}
num_darts <- 10000
num_darts_in_circle <- 0
for(i in 1:num_darts){
x <- runif(n = 1, min = -1, max = 1)
y <- runif(n = 1, min = -1, max = 1)
if(x^2 + y^2 <= 1){
num_darts_in_circle = num_darts_in_circle + 1
}
print(4 * num_darts_in_circle/num_darts)
}
num_darts <- 10000
num_darts_in_circle <- 0
for(i in 1:num_darts){
x <- runif(n = 1, min = -1, max = 1)
y <- runif(n = 1, min = -1, max = 1)
if(x^2 + y^2 <= 1){
num_darts_in_circle = num_darts_in_circle + 1
}
}
print(4 * num_darts_in_circle/num_darts)
num_darts <- 1000
num_darts_in_circle <- 0
for(i in 1:num_darts){
x <- runif(n = 1, min = -1, max = 1)
y <- runif(n = 1, min = -1, max = 1)
if(x^2 + y^2 <= 1){
num_darts_in_circle = num_darts_in_circle + 1
}
}
print(4 * num_darts_in_circle/num_darts)
num_darts <- 10000
num_darts_in_circle <- 0
for(i in 1:num_darts){
x <- runif(n = 1, min = -1, max = 1)
y <- runif(n = 1, min = -1, max = 1)
if(x^2 + y^2 <= 1){
num_darts_in_circle = num_darts_in_circle + 1
}
}
print(4 * num_darts_in_circle/num_darts)
num_darts <- 100000
num_darts <- 100000
num_darts_in_circle <- 0
for(i in 1:num_darts){
x <- runif(n = 1, min = -1, max = 1)
y <- runif(n = 1, min = -1, max = 1)
if(x^2 + y^2 <= 1){
num_darts_in_circle = num_darts_in_circle + 1
}
}
print(4 * num_darts_in_circle/num_darts)
num_darts <- 1000000
num_darts_in_circle <- 0
for(i in 1:num_darts){
x <- runif(n = 1, min = -1, max = 1)
y <- runif(n = 1, min = -1, max = 1)
if(x^2 + y^2 <= 1){
num_darts_in_circle = num_darts_in_circle + 1
}
}
print(4 * num_darts_in_circle/num_darts)
data <- warpbreaks
data <- warpbreaks
head(data)
class(data$breaks)
View(data)
rm(list = ls())
plot(cars, pch=20)
abline(lm(dist~speed, cars), lwd=2, col=2)
x = cars$speed
y = cars$dist
N = nrow(cars)
K = 10
folds = cut(1:N,K,labels=FALSE)
p1 = se = sb = numeric(K)
set.seed(1)
for(i in 1:K)
# CV
itrain = which(folds!=i)
lmo = lm(y[itrain]~x[itrain])
se[i] = summary(lmo)$coef[2,2]
set.seed(1)
for(i in 1:K)
# bootstrapping
ib = sample(1:N,N,replace=TRUE)
lmb = lm(y[ib]~x[ib])
sb[i] = summary(lmb)$coef[2,2]
mean(se)
mean(sb)
boxplot(cbind(se,sb))
t.test(se,sb)
rm(list=ls())
attach(mtcars)
mtcars
mtcars
model1 <- lm(mpg ~ as.factor(cyl) + wt)
summary(model1)
### Model Matrix ###
model.matrix(model1)
model2 <- lm(mpg ~ cyl + wt)
summary(model2)
model3 <- lm(mpg ~ cyl + wt + cyl*wt)
summary(model3)
# from the p value of interaction term we can say that it is statistically
# significant, which mean it is not appropriate to use the cyl or wt alone
# their estimates and also the interaction effect must be taken into account.
model.matrix(model3)
rm(list = ls())
?droplevels
df <- iris
View(df)
df1 <- df[:100]
df1 <- df[100:]
df1 <- df[1:100,]
View(df1)
df1$Species <- droplevels(df1$Species)
View(df1)
x = df1[,1:4]
y = df1$Species
y = as.factor(y)
y
?apply
pca.scaled = prcomp(x, scale = TRUE)
pca.unscaled = prcomp(x)
summary(pca.scaled)
summary(pca.unscaled)
pca.scaled
### Scree plot ###
par(mfrow=c(1,2))
plot(pca.scaled, main = "PCA Scaled version")
plot(pca.unscaled, main = "PCA Unscaled version")
rm(list = ls())
### Input the data ###
low = c(54.7, 50.5, 45.9 ,59.7 ,51.5, 45.5, 47.4, 55.6, 59.4 ,56.9)
inter = c(48.6, 55.8, 62.6, 64.7 ,54.3, 61.3,
44.6, 59.8 ,46.0, 56.5,42.4 ,71.4, 62.6, 67.9,
55.2, 47.3, 75.9)
high=c(63.8 ,65.4, 68.1, 70.0, 63.9, 63.6, 63.6,
59.5, 56.3 ,59.1, 60.6)
### combining the three vectors into one single vector ###
y = c(low, inter, high)
### Creating a response variable called Grade (Grade of Tumor) ###
grade = c(low*0+1, inter*0+2, high*0+3)
grade
### Performing exploratory plot and interpreting the output
plot(grade, y, xlab = "Grade of Tumor", ylab = "Metabolic Rate")
### Performing exploratory plot and interpreting the output
plot(grade, y, xlab = "Grade of Tumor", ylab = "Metabolic Rate",
pch=15)
### Performing exploratory plot and interpreting the output
plot(grade, y, xlab = "Grade of Tumor", ylab = "Metabolic Rate",
pch=12)
### Performing exploratory plot and interpreting the output
plot(grade, y, xlab = "Grade of Tumor", ylab = "Metabolic Rate",
pch=10)
### Performing exploratory plot and interpreting the output
plot(grade, y, xlab = "Grade of Tumor", ylab = "Metabolic Rate",
pch=12)
### Performing exploratory plot and interpreting the output
plot(grade, y, xlab = "Grade of Tumor", ylab = "Metabolic Rate",
pch=20)
?plot
### Performing exploratory plot and interpreting the output
plot(grade, y, xlab = "Grade of Tumor", ylab = "Metabolic Rate",
pch=20, cex=5)
### Performing exploratory plot and interpreting the output
plot(grade, y, xlab = "Grade of Tumor", ylab = "Metabolic Rate",
pch=20, cex=3)
### Performing exploratory plot and interpreting the output
plot(grade, y, xlab = "Grade of Tumor", ylab = "Metabolic Rate",
pch=20, cex=2)
### Plotting boxplot
boxplot(y~grade)
### Performing one-way anova ###
ow.aov = aov(y ~ as.factor(grade))
summary(ow.aov)
### Plotting the model residuals by grade
plot(grade, ow.aov$residuals)
### Plotting the model residuals by grade
plot(grade, ow.aov$residuals, ylab = "Residuals")
### plotting the QQ-Plot
qqplot(ow.aov$residuals)
### plotting the QQ-Plot
qqnorm(ow.aov$residuals)
qqline(resid(ow.aov))
?qqplot
qqplot(ow.aov$residuals, length(y))
### plotting the QQ-Plot
qqnorm(ow.aov$residuals)
qqline(resid(ow.aov))
hist(ow.aov$residuals)
hist(ow.aov$residuals, freq = FALSE)
curve(dnorm(x, mean = 0, sd = 10),
from = -20,
to = 20,
add = TRUE,
col = "red")
curve(dnorm(x, mean = 0, sd = 10),
from = -30,
to = 30,
add = TRUE,
col = "red")
curve(dnorm(x, mean = 0, sd = 10),
from = -30,
to = 30,
add = TRUE,
col = "red", lwd=10)
curve(dnorm(x, mean = 0, sd = 10),
from = -30,
to = 30,
add = TRUE,
col = "red", lwd=5)
curve(dnorm(x, mean = 0, sd = 10),
from = -30,
to = 30,
add = TRUE,
col = "red", lwd=4)
hist(ow.aov$residuals, freq = FALSE)
curve(dnorm(x, mean = 0, sd = 10),
from = -30,
to = 30,
add = TRUE,
col = "red", lwd=4)
cbind(y, grade, x2, x3)
if (grade == 2){
x2 = 1 else {
if (grade == 2)
{
x2 = 1
}
else
{
x2 = 0
}
if (grade == 3)
{
x3 = 1
}
else
{
x3 = 0
}
cbind(y, grade, x2, x3)
x2 = ifelse(grade == 2, 1, 0)
x3 = ifelse(grade == 3, 1, 0)
cbind(y, grade, x2, x3)
model = lm(grade ~ x2 + x3)
summary(model)
summary(model)
model = lm(y ~ x2 + x3)
summary(model)
model2 = lm(y ~ 1)
summary(model2)
rm(list=ls())
setwd("D:/UCC/Academic Work/Sem-2/ST6033 - GLM/Lab/ST6033---GLM/SDL/Binary Regression")
df <- read.table("orings.txt")
View(df)
### Looking at the data ###
plot(df, xlim = c(40, 90), ylim = c(0, 6), xlab = "Launch Temperature",
ylab = "O-Ring Damage")
points(subset(df, subset = damage > 0), pch=16, col="red")
points(subset(df, subset = damage == 0), pch=15, col="blue")
attach(df)
cbind(damage, 6-damage)
log_model <- glm(cbind(damage , 6-damage) ~ temp, data = df)
log_model <- glm(cbind(damage , 6-damage) ~ temp,
family = "binomial" , data = df)
summary(log_model)
x <- seq(25, 85, 1)
Xmat <- cbind(rep(1, length(x)), x)
eta <- Xmat %*% log_model$coefficients
lines(x, ilogit(eta)*6, lwd=3)
lines(x, inv.logit(eta)*6, lwd=3)
?logit
install.packages("LaplacesDemon")
library(LaplacesDemon)
x <- seq(25, 85, 1)
Xmat <- cbind(rep(1, length(x)), x)
eta <- Xmat %*% log_model$coefficients
lines(x, invlogit(eta)*6, lwd=3)
Xmat
log_model$coefficients
eta
log_model_2 <- glm(cbind(damage, 6-damage) ~ temp,
family = binomial(link = probit), data = df)
summary(log_model_2)
Xmat = cbind(rep(1, length(x)), x)
eta = Xmat %*% log_model_2$coefficients
Xmat_b = cbind(rep(1, length(x)), x)
eta_b = Xmat %*% log_model_2$coefficients
Xmat <- cbind(rep(1, length(x)), x)
eta <- Xmat %*% log_model$coefficients
lines(x, pnorm(eta_b)*6, lwd = 3, col="grey")
lines(x, pnorm(eta_b)*6, lwd = 3, col="grey", lty=2)
lines(x, pnorm(eta_b)*6, lwd = 3, col="orange", lty=2)
rm(list=ls())
setwd("D:/UCC/Academic Work/Sem-2/ST6033 - GLM/Lab/ST6033---GLM/SDL/Binary Regression")
df <- read.table("orings.txt")
### Looking at the data (Visualizing the data) ###
plot(df, xlim = c(40, 90), ylim = c(0, 6), xlab = "Launch Temperature",
ylab = "O-Ring Damage")
### The highlighted points where damage has occured on the
### o-rings, they are highlighted in red.
points(subset(df, subset = damage > 0), pch=16, col="red")
### If the points along the y-axis are 0 then there is no
### damage occured on the O-rings, they are highlighted in
### blue.
points(subset(df, subset = damage == 0), pch=15, col="blue")
attach(df)
### The cbind is done here to fit the logistic model, the cmd
### makes two columns, giving the counts(instances), where
### there was damage in the first column and in the second
### column it gives the count of non damaged ones, this matrix
### is used for fitting the logisitic model using glm.
cbind(damage, 6-damage)
log_model <- glm(cbind(damage , 6-damage) ~ temp,
family = "binomial" , data = df)
summary(log_model)
x <- seq(25, 85, 1)
Xmat <- cbind(rep(1, length(x)), x)
eta <- Xmat %*% log_model$coefficients
lines(x, inv.logit(eta)*6, lwd=3)
#install.packages("LaplacesDemon") ### The package needed to perform
library(LaplacesDemon)            ### inverse logit function.
x <- seq(25, 85, 1)
Xmat <- cbind(rep(1, length(x)), x)
eta <- Xmat %*% log_model$coefficients
lines(x, invlogit(eta)*6, lwd=3)
log_model_2 <- glm(cbind(damage, 6-damage) ~ temp,
family = binomial(link = probit), data = df)
summary(log_model_2)
Xmat_b = cbind(rep(1, length(x)), x)
eta_b = Xmat %*% log_model_2$coefficients
lines(x, pnorm(eta_b)*6, lwd = 3, col="orange", lty=2)
summary(log_model)
deviance(log_model)
pchisq(deviance(log_model),df.residual(log_model),lower=FALSE)
?df.residual
names(log_model)
log_model$null.deviance
c(-0.2162 - 2*0.0532, -0.2162 + 2*0.0532)
confint(log_model)
?binomial
?xtabs
?confint
rm(list = ls())
setwd("D:/UCC/Academic Work/Sem-2/ST6033 - GLM/Lab/ST6033---GLM/SDL/Binary Regression")
df <- read.table("babyfood.txt")
View(df)
attach(df)
xtabs(disease/(disease+nondisease) ~ sex + food, df)
round(xtabs(disease/ (disease+nondisease) ~ sex + food, df))
round(xtabs(disease/ (disease+nondisease) ~ sex + food, df), 3)
mytab = xtabs(disease/(disease+nondisease) ~ sex + food, df)
plot(mytab)
plot(mytab, main="Mosaic Plot")
options( show.signif.stars = FALSE)
log_model <- glm(cbind(disease, nondisease) ~ sex + food,
family = binomial, data = df)
summary(log_model)
drop1(babyfit,test="Chi")
drop1(log_model,test="Chi")
coefficients(log_model)
