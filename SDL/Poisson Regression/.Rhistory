minx = min(x,na.rm=TRUE)
maxx = max(x,na.rm=TRUE)
return((x-minx)/(maxx-minx))
}
datss = data.frame(lapply(df,myrecode))
datss = data.frame(lapply(datss,myscale))
mean(datss$age)
mean(datss$x.max)
mean(datss$x.mean)
datss$grade = NULL
### Fitting Neural Network Model ###
set.seed(4061)
nno = neuralnet(y~., data = datss, hidden=c(5), linear.output = FALSE)
nno$result.matrix["error",]
preds = predict(nno, datss, type='class')
final_preds = max.col(preds)
tbp = table(final_preds, y)
sum(diag(tbp))/sum(tbp)
library(caret)
confusionMatrix(final_preds, y)
confusionMatrix(final_preds, as.factor(y))
final_preds
confusionMatrix(final_preds, as.numeric(y))
y_confusion = as.numeric(y)
confusionMatrix(final_preds, y_confusion)
y_confusion
confusionMatrix(as.factor(final_preds), as.factor(y_confusion))
tbp
View(x)
x$sex = as.numeric(x$sex)
cor.test(x)
cor.test(x)
correlation_matrix <- cor(x)
print(correlation_matrix)
correlation_matrix <- cor(x)
cutoff <- 0.95
highly_correlated_pairs <- which(correlation_matrix > cutoff & upper.tri(correlation_matrix, diag = FALSE), arr.ind = TRUE)
features_to_remove <- unique(c(highly_correlated_pairs[,1], highly_correlated_pairs[,2]))
if (length(features_to_remove) > 0) {
cat("Features to remove:", paste(names(x)[features_to_remove], collapse = ", "))
} else {
cat("No features to remove.")
}
?upper.tri
x_age = subdf$age
y_sex = as.numeric(subdf$sex)
wilcox.test(x_age, y_sex, alternative = "two.sided")
x_max = subdf$x.max
wilcox.test(x_max, y_sex, alternative = "two.sided")
x_mean = subdf$x.mean
wilcox.test(x_mean, y_sex, alternative = "two.sided")
rm(list = ls())
library(neuralnet)
library(caret)
library(DataExplorer)
library(caret)
setwd("D:/UCC/Academic Work/Sem-2/ST6041 - ML 2/Assignment/Assignment-2")
df = read.csv(file="uws.csv", stringsAsFactors=TRUE)
subdf = df[,c("grade","sex","age","x.mean","x.max")]
y = df$grade
x = df
x$grade = NULL
x_age = subdf$age
y_sex = as.numeric(subdf$sex)
wilcox.test(x_age ~ y_sex, alternative = "two.sided")
x_max = subdf$x.max
wilcox.test(x_max ~ y_sex, alternative = "two.sided")
x_mean = subdf$x.mean
wilcox.test(x_mean ~ y_sex, alternative = "two.sided")
myrecode <- function(x){
if(is.factor(x)){
levels(x)
return(as.numeric(x))
} else {
return(x)
}
}
myscale <- function(x){
minx = min(x,na.rm=TRUE)
maxx = max(x,na.rm=TRUE)
return((x-minx)/(maxx-minx))
}
datss = data.frame(lapply(df,myrecode))
datss = data.frame(lapply(datss,myscale))
datss$grade = NULL
set.seed(4061)
nno = neuralnet(y~., data = datss, hidden=c(5), linear.output = FALSE)
plot(nno)
nno$result.matrix["error",]
preds = predict(nno, datss, type='class')
final_preds = max.col(preds)
tbp = table(final_preds, y)
sum(diag(tbp))/sum(tbp)
confusionMatrix(as.factor(final_preds), y)
y_confusion = as.numeric(y)
confusionMatrix(as.factor(final_preds), as.factor(y_confusion))
tbp
numeric_cols <- sapply(x, is.numeric)
correlation_matrix <- cor(x[, numeric_cols])
correlation_matrix
cols = colnames(correlation_matrix)
cols
pairs = c()
for (i in cols) {
for (j in cols) {
if (i!=j & correlation_matrix[i,j] > 0.95) {
pairs = c(pairs, c(i,j))
}
}
}
unique(pairs)
corr_mat = cor(x)
x_num = as.numeric(x)
rm(list = ls())
library(neuralnet)
library(caret)
library(DataExplorer)
setwd("D:/UCC/Academic Work/Sem-2/ST6041 - ML 2/Assignment/Assignment-2")
df = read.csv(file="uws.csv", stringsAsFactors=TRUE)
subdf = df[,c("grade","sex","age","x.mean","x.max")]
y = df$grade
x = df
x$grade = NULL
x_num = as.numeric(x)
x_num = as.numeric(unlist(x))
corr_mat = cor(x_num)
x$sex = as.numeric(x$sex)
x_cor = cor(x)
thresh = 0.95
colnames(x_cor)
for (i in colnames(x_cor)) {
for (j in colnames(x_cor)){
if ((i!= j) & (cor(x_cor[[i]], x_cor[[j]]) < thresh)) {
print(paste(i,j))
}
}
}
for i in colnames(x_cor){}
for i in colnames(x_cor){print(i)}
for (i in colnames(x_cor)) {
for (j in colnames(x_cor)){
if (i != j) {
# Check if j is a valid column name in x_cor
if (j %in% colnames(x_cor)) {
if (cor(x_cor[[i]], x_cor[[j]]) < thresh) {
print(paste(i, j))
}
} else {
# Print a message if j is not a valid column name in x_cor
print(paste("Column", j, "not found in x_cor"))
}
}
}
}
for (i in colnames(x_cor)) {
for (j in colnames(x_cor)){
print(paste("i:", i, "j:", j))
if ((i!= j) & (cor(x_cor[[i]], x_cor[[j]]) < thresh)) {
print(paste(i,j))
}
}
}
for (i in cols_names) {
for (j in cols_names){
print(paste("i:", i, "j:", j))
if ((i!= j) & (cor(x_cor[[i]], x_cor[[j]]) < thresh)) {
print(paste(i,j))
}
}
}
cols_names = colnames(x_cor)
for (i in cols_names) {
for (j in cols_names){
print(paste("i:", i, "j:", j))
if ((i!= j) & (cor(x_cor[[i]], x_cor[[j]]) < thresh)) {
print(paste(i,j))
}
}
}
for (i in cols_names) {
for (j in cols_names){
print(paste("i:", i, "j:", j))
if ((i!= j) & (x_cor[i,j] > thresh)) {
print(paste(i,j))
}
}
}
for (i in cols_names) {
for (j in cols_names){
print(paste("i:", i, "j:", j))
if ((i!= j) & (x_cor[i,j] < thresh)) {
print(paste(i,j))
}
}
}
for (i in cols_names) {
for (j in cols_names){
print(paste("i:", i, "j:", j))
if ((i!= j) & (x_cor[i,j] < thresh)) {
unique(print(paste(i,j)))
}
}
}
for (i in cols_names) {
for (j in cols_names){
if ((i!= j) & (x_cor[i,j] < thresh)) {
unique(print(paste(i,j)))
}
}
}
for (i in cols_names) {
for (j in cols_names){
if ((i!= j) & (x_cor[i,j] > thresh)) {
unique(print(paste(i,j)))
}
}
}
for (i in colnames(x_cor)) {
for (j in colnames(x_cor)){
if ((i!= j) & (x_cor[i,j] > thresh)) {
unique(print(paste(i,j)))
}
}
}
?print
?paste
rm(list=ls())
library(ISLR)
library(gbm)
df = na.omit(Hitters)
df$Salary = log(df$Salary)
rates = c(0.001, 0.05, 0.01, 0.1)
len_rates = length(rates)
set.seed(4061)
B = 100
rmse_val = matrix(NA,nrow=B,ncol=len_rates)
n = nrow(df)
for(i in 1:len_rates) {
for(j in 1:B){
idx = sample(c(1:n), size = n, replace = TRUE)
bdf = df[idx,]
gb.out = gbm(Salary~., data=bdf,
distribution="gaussian",
shrinkage = rates[i])
gb.pred = predict(gb.out, df[-idx,])
y_true = df[-idx,]$Salary
rmse_val[j,i] = sqrt(mean((gb.pred-y_true)^2))
}
}
rmse_val
mean_rmse_val = numeric(length = len_rates)
for(k in (1:len_rates)){
mean_rmse_val[k] = mean(rmse_val[,k])
}
mean_rmse_val
boxplot(rmse_val, col="orange", main="Boxplot of Shrinkage Rates vs OOB RMSE Values",
xlab="Shrinkage Rates - (0.001, 0.05, 0.01, 0.1)", ylab="OOB RMSE")
colnames(rmse_val) = rates
boxplot(rmse_val, col="orange", main="Boxplot of Shrinkage Rates vs OOB RMSE Values",
xlab="Shrinkage Rates", ylab="OOB RMSE")
rm(list = ls())
library(neuralnet)
library(caret)
library(DataExplorer)
setwd("D:/UCC/Academic Work/Sem-2/ST6041 - ML 2/Assignment/Assignment-2")
df = read.csv(file="uws.csv", stringsAsFactors=TRUE)
subdf = df[,c("grade","sex","age","x.mean","x.max")]
y = df$grade
x = df
x$grade = NULL
plot_bar(df)
plot_boxplot(subdf, by="grade")
plot_boxplot(subdf, by="sex")
hist(subdf$age) ## Normal distribution
hist(subdf$x.mean) ## Not Normal
hist(subdf$x.max) ## Not Normal
x_age = subdf$age
y_sex = as.numeric(subdf$sex)
wilcox.test(x_age ~ y_sex, alternative = "two.sided")
x_max = subdf$x.max
wilcox.test(x_max ~ y_sex, alternative = "two.sided")
x_mean = subdf$x.mean
wilcox.test(x_mean ~ y_sex, alternative = "two.sided")
### Means before scaling ###
mean(df$age)
mean(df$x.max)
mean(df$x.mean)
### Means after scaling ###
myrecode <- function(x){
if(is.factor(x)){
levels(x)
return(as.numeric(x))
} else {
return(x)
}
}
myscale <- function(x){
minx = min(x,na.rm=TRUE)
maxx = max(x,na.rm=TRUE)
return((x-minx)/(maxx-minx))
}
datss = data.frame(lapply(df,myrecode))
datss = data.frame(lapply(datss,myscale))
mean(datss$age)
mean(datss$x.max)
mean(datss$x.mean)
datss$grade = NULL
### Fitting Neural Network Model ###
set.seed(4061)
nno = neuralnet(y~., data = datss, hidden=c(5), linear.output = FALSE)
plot(nno)
nno$result.matrix["error",]
preds = predict(nno, datss, type='class')
final_preds = max.col(preds)
tbp = table(final_preds, y)
sum(diag(tbp))/sum(tbp)
y_confusion = as.numeric(y)
confusionMatrix(as.factor(final_preds), as.factor(y_confusion))
x$sex = as.numeric(x$sex)
x_cor = cor(x)
thresh = 0.95
for (i in colnames(x_cor)) {
for (j in colnames(x_cor)){
if ((i!= j) & (x_cor[i,j] > thresh)) {
unique(print(paste(i,j)))
}
}
}
View(df)
x$sex = as.numeric(x$sex)
x_cor = cor(x)
thresh = 0.95
for (i in colnames(x_cor)) {
for (j in colnames(x_cor)){
if ((i!= j) & (x_cor[i,j] > thresh)) {
unique(print(i))
}
}
}
for (i in colnames(x_cor)) {
for (j in colnames(x_cor)){
if ((i!= j) & (x_cor[i,j] > thresh)) {
length(unique(print(i)))
}
}
}
for (i in colnames(x_cor)) {
for (j in colnames(x_cor)){
if ((i!= j) & (x_cor[i,j] > thresh)) {
unique(print(paste(i)))
}
}
}
unique_vals = c()
for (i in colnames(x_cor)) {
for (j in colnames(x_cor)){
if ((i!= j) & (x_cor[i,j] > thresh)) {
unique_vals = c(i,j)
}
}
}
print(unique(unique_vals))
unique_vals
for (i in colnames(x_cor)) {
for (j in colnames(x_cor)){
if ((i!= j) & (x_cor[i,j] > thresh)) {
unique_vals = c(unique_vals, c(i,j))
}
}
}
print(unique(unique_vals))
for (i in colnames(x_cor)) {
for (j in colnames(x_cor)){
if ((i!= j) & (abs(x_cor[i,j]) > thresh)) {
unique_vals = c(unique_vals, c(i,j))
}
}
}
print(unique(unique_vals))
rm(list = ls())
library(neuralnet)
library(caret)
library(DataExplorer)
setwd("D:/UCC/Academic Work/Sem-2/ST6041 - ML 2/Assignment/Assignment-2")
df = read.csv(file="uws.csv", stringsAsFactors=TRUE)
subdf = df[,c("grade","sex","age","x.mean","x.max")]
y = df$grade
x = df
x$grade = NULL
plot_bar(df)
plot_boxplot(subdf, by="grade")
plot_boxplot(subdf, by="sex")
x_age = subdf$age
y_sex = as.numeric(subdf$sex)
wilcox.test(x_age ~ y_sex, alternative = "two.sided")
x_max = subdf$x.max
wilcox.test(x_max ~ y_sex, alternative = "two.sided")
x_mean = subdf$x.mean
wilcox.test(x_mean ~ y_sex, alternative = "two.sided")
### Means before scaling ###
mean(df$age)
mean(df$x.max)
mean(df$x.mean)
### Means after scaling ###
myrecode <- function(x){
if(is.factor(x)){
levels(x)
return(as.numeric(x))
} else {
return(x)
}
}
myscale <- function(x){
minx = min(x,na.rm=TRUE)
maxx = max(x,na.rm=TRUE)
return((x-minx)/(maxx-minx))
}
datss = data.frame(lapply(df,myrecode))
datss = data.frame(lapply(datss,myscale))
mean(datss$age)
mean(datss$x.max)
mean(datss$x.mean)
datss$grade = NULL
### Fitting Neural Network Model ###
set.seed(4061)
nno = neuralnet(y~., data = datss, hidden=c(5), linear.output = FALSE)
plot(nno)
nno$result.matrix["error",]
preds = predict(nno, datss, type='class')
final_preds = max.col(preds)
tbp = table(final_preds, y)
sum(diag(tbp))/sum(tbp)
y_confusion = as.numeric(y)
confusionMatrix(as.factor(final_preds), as.factor(y_confusion))
x$sex = as.numeric(x$sex)
x_cor = cor(x)
thresh = 0.95
unique_vals = c()
for (i in colnames(x_cor)) {
for (j in colnames(x_cor)){
if ((i!= j) & (abs(x_cor[i,j]) > thresh)) {
unique_vals = c(unique_vals, c(i,j))
}
}
}
print(unique(unique_vals))
rm(list=ls())
library(ISLR)
library(gbm)
df = na.omit(Hitters)
df$Salary = log(df$Salary)
rates = c(0.001, 0.05, 0.01, 0.1)
len_rates = length(rates)
set.seed(4061)
B = 100
rmse_val = matrix(NA,nrow=B,ncol=len_rates)
n = nrow(df)
for(i in 1:len_rates) {
for(j in 1:B){
idx = sample(c(1:n), size = n, replace = TRUE)
bdf = df[idx,]
gb.out = gbm(Salary~., data=bdf,
distribution="gaussian",
shrinkage = rates[i])
gb.pred = predict(gb.out, df[-idx,])
y_true = df[-idx,]$Salary
rmse_val[j,i] = sqrt(mean((gb.pred-y_true)^2))
}
}
rmse_val
mean_rmse_val = numeric(length = len_rates)
for(k in (1:len_rates)){
mean_rmse_val[k] = mean(rmse_val[,k])
}
mean_rmse_val
colnames(rmse_val) = rates
boxplot(rmse_val, col="orange", main="Boxplot of Shrinkage Rates vs OOB RMSE Values",
xlab="Shrinkage Rates", ylab="OOB RMSE")
rm(list = ls())
function (x, df1, df2, ncp, log = FALSE)
library(neuralnet)
library(caret)
library(neuralnet)
library(DataExplorer)
setwd("D:/UCC/Academic Work/Sem-2/ST6041 - ML 2/Assignment/Assignment-2")
df = read.csv(file="uws.csv", stringsAsFactors=TRUE)
subdf = df[,c("grade","sex","age","x.mean","x.max")]
y = df$grade
x = df
x$grade = NULL
correlation_matrix = cor(x[,-2])
diag(correlation_matrix) = 0
inds.cor = arrayInd(which(abs(correlation_matrix)>0.95), .dim=dim(correlation_matrix))
colnames(correlation_matrix)[inds.cor[,1]]
unique(colnames(correlation_matrix)[inds.cor[,1]])
rm(list=ls())
library("daewr")
setwd("D:/UCC/Academic Work/Sem-2/ST6033 - GLM/Lab/ST6033---GLM/SDL/Poisson Regression")
gala = read.table("gala.txt")
gala <- gala[,-2]
modp <- glm(Species ~ .,family=poisson,gala)
plot(residuals(modp) ~ predict(modp,type="response"),xlab=expression(hat(mu)),ylab="Deviance residuals")
plot(modp)
rm(list=ls())
attach(InsectSprays)
names(InsectSprays)
df = InsectSprays
View(df)
boxplot(count~spray)
poi_model = glm(count ~ spray, data = df, family = 'poisson')
summary(poi_model)
pchisq(deviance(poi_model), df.residual(poi_model), lower = FALSE)
